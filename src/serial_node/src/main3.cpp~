/* www.chrisheydrick.com
     
   June 23 2012
   CanonicalArduinoRead write a byte to an Arduino, and then
   receives a serially transmitted string in response.
   The call/response Arduino sketch is here:
   https://gist.github.com/2980344
   Arduino sketch details at www.chrisheydrick.com
*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdint.h>
#include <fcntl.h>
#include <termios.h>
#include <errno.h>
#include <sys/ioctl.h>
  
int main(int argc, char *argv[])
{
  int fd, n;
  struct termios toptions;

  /* open serial port */
  fd = open("/dev/ttyACM0", O_RDWR | O_NOCTTY);
  printf("fd opened as %i\n", fd);
  
  /* wait for the Arduino to reboot */
  sleep(1);
  
  /* get current serial port settings */
  tcgetattr(fd, &toptions);
  /* set 115200 baud both ways */
  cfsetispeed(&toptions, B115200);
  cfsetospeed(&toptions, B115200);
  
  /* 8 bits, no parity, no stop bits */
  toptions.c_cflag &= ~PARENB;
  toptions.c_cflag &= ~CSTOPB;
  toptions.c_cflag &= ~CSIZE;
  toptions.c_cflag |= CS8;

  /* No Canonical mode */
  toptions.c_lflag = 0;

  /* commit the serial port settings */
  tcsetattr(fd, TCSANOW, &toptions);

  printf("Go!\n");
   char buf [5];
   long int k=0;
   while(1){
      write (fd, "ASEL", 4);           // send 7 character greeting
      //usleep (10000);
      int n = read (fd, buf, sizeof buf);  // read up to 100 characters if ready to read
      char test = buf[0];
      //int x = atoi(test);
      for(int i=0;i<sizeof(buf);i++){
          printf("%d \t-\t ",buf[i]);
      }
      usleep(10000);
      printf("Reading %li \n",k);
      k++;
  }

  /* Send byte to trigger Arduino to send string back
  write(fd, "0", 1);
  // Receive string from Arduino
  n = read(fd, buf, 64);
  // insert terminating zero in the string
  buf[n] = 0;

  printf("%i bytes read, buffer contains: %s\n", n, buf);
 
  if(DEBUG)
    {
      printf("Printing individual characters in buf as integers...\n\n");
      for(i=0; i<n; i++)
      	{
      	  printf("Byte %i:%i, ",i+1, (int)buf[i]);
      	}
      printf("\n");
    }*/

  return 0;
}