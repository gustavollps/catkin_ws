#include "serial.h"
#include "serial_node/Angle.h"
#include "serial_node/ResetAngle.h"

Serial Serial("/dev/ttyACM0",38400);

float _sin = 0;
float _offset = 0;

void serialCallback(serial_node::data msg)
{
  ROS_INFO("Message Recieved %c", msg.device);
}

bool reset_angle(serial_node::ResetAngle::Request &req,
	 serial_node::ResetAngle::Response &res)
{	
	_offset+=_sin;
	return true;
}

int main(int argc, char *argv[])
{
  ros::init(argc, argv, "SERIAL_NODE");
  ros::NodeHandle n;
  ros::Publisher serial_pub = n.advertise<serial_node::Angle>("SERIAL_OUT", 100);
  ros::Subscriber sub = n.subscribe("SERIAL_IN", 100, serialCallback);
  ros::Rate loop_rate(100);
  ros::ServiceServer service = n.advertiseService("ResetAngle", reset_angle);

  int fd = Serial.begin();
  
  int errors = 0;
  char buf [6];
  char flush[10];
  long int count=0;

  write (fd, "k", 1);
  usleep(10000);
  
  while(ros::ok()){

    serial_node::Angle msg;  
	
    int n = read (fd, buf, sizeof buf);  // read

    #ifdef DEBUG_bytes
    printf("%d\t",buf[0]);
    for(int i=1;i<sizeof(buf)-1;i++){
        printf("%d\t-  ",buf[i]);
    }
    printf("%d\t Reading... ",buf[5]);
    #endif

    if(buf[0]==-128 && buf[5]==-1){

      _sin = Serial.bytesToFloat(buf[1],buf[2],buf[3],buf[4]) - _offset;     

      if(_sin <= 180 && _sin >= -180){
        msg.angle = _sin;
        serial_pub.publish(msg);
      }

      ROS_INFO("Message: %f\t Reading %li\t",_sin,count);

      count++;

    }
    else{
      errors++;
      ROS_WARN("Errors: %d",errors);
      printf("\n");
    }
    
    Serial.flush();
    
    ros::spinOnce();
    loop_rate.sleep();
    write (fd, "k", 1);
  }
  printf("Saiu\n");

  return 0;
}
