// Generated by gencpp from file tcc_msgs/interrupt_counter.msg
// DO NOT EDIT!


#ifndef TCC_MSGS_MESSAGE_INTERRUPT_COUNTER_H
#define TCC_MSGS_MESSAGE_INTERRUPT_COUNTER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tcc_msgs
{
template <class ContainerAllocator>
struct interrupt_counter_
{
  typedef interrupt_counter_<ContainerAllocator> Type;

  interrupt_counter_()
    : int1(0)
    , int2(0)
    , int3(0)  {
    }
  interrupt_counter_(const ContainerAllocator& _alloc)
    : int1(0)
    , int2(0)
    , int3(0)  {
  (void)_alloc;
    }



   typedef uint32_t _int1_type;
  _int1_type int1;

   typedef uint32_t _int2_type;
  _int2_type int2;

   typedef uint32_t _int3_type;
  _int3_type int3;




  typedef boost::shared_ptr< ::tcc_msgs::interrupt_counter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tcc_msgs::interrupt_counter_<ContainerAllocator> const> ConstPtr;

}; // struct interrupt_counter_

typedef ::tcc_msgs::interrupt_counter_<std::allocator<void> > interrupt_counter;

typedef boost::shared_ptr< ::tcc_msgs::interrupt_counter > interrupt_counterPtr;
typedef boost::shared_ptr< ::tcc_msgs::interrupt_counter const> interrupt_counterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tcc_msgs::interrupt_counter_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tcc_msgs::interrupt_counter_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tcc_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'tcc_msgs': ['/home/tony/catkin_ws/src/tcc/tcc_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tcc_msgs::interrupt_counter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tcc_msgs::interrupt_counter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tcc_msgs::interrupt_counter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tcc_msgs::interrupt_counter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tcc_msgs::interrupt_counter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tcc_msgs::interrupt_counter_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tcc_msgs::interrupt_counter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c1c28d031d374be466e93c93fdd9023";
  }

  static const char* value(const ::tcc_msgs::interrupt_counter_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c1c28d031d374beULL;
  static const uint64_t static_value2 = 0x466e93c93fdd9023ULL;
};

template<class ContainerAllocator>
struct DataType< ::tcc_msgs::interrupt_counter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tcc_msgs/interrupt_counter";
  }

  static const char* value(const ::tcc_msgs::interrupt_counter_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tcc_msgs::interrupt_counter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 int1\n\
uint32 int2\n\
uint32 int3\n\
";
  }

  static const char* value(const ::tcc_msgs::interrupt_counter_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tcc_msgs::interrupt_counter_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.int1);
      stream.next(m.int2);
      stream.next(m.int3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct interrupt_counter_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tcc_msgs::interrupt_counter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tcc_msgs::interrupt_counter_<ContainerAllocator>& v)
  {
    s << indent << "int1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.int1);
    s << indent << "int2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.int2);
    s << indent << "int3: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.int3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TCC_MSGS_MESSAGE_INTERRUPT_COUNTER_H
